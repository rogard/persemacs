#+title: Personal Emacs 
#+author: Erwann Rogard 
#+property: header-args :tangle no

#+begin_src org
  This Emacs Org file contains a subset of my Emacs configuration, with the rest located in =./config=.
#+end_src

* doc
** abstract

#+begin_src org
  This file can be used to generate =./config/init.el= (1) and =symlink.sh= (2), using only =emacs -Q=. Loading (1) bootstraps with =straight.el= and loads =./config/main.el=. Executing (2) links (1) to ~user-init-file~ (typically, that's =~/.emacs=).
#+end_src

** requirement
:PROPERTIES:
:custom_id: _doc-req
:END:

Installed:
#+name: doc-req-install
| Package    | Purpose    |
|------------+------------|
| Emacs      | init.el    |
| Unix shell | symlink.sh |

** workflow

For each source blocks below:
- Execute it
- Process the matches as indicated

Customize:
#+begin_src emacs-lisp
  (org-occur "customize_bool: true")
#+end_src

Tangle:
#+begin_src emacs-lisp
  (org-occur "header-args: :tangle")
#+end_src

Execute:
#+begin_src emacs-lisp
  (org-occur "postinit_bool: true")
#+end_src

** reference

Managing source code:
- [[https://orgmode.org/manual/Working-with-Source-Code.html][Working with source code]]

* source
** elisp
*** init
**** group

#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  (defgroup erw/config nil "erw's config"
    :prefix "erw/config")
#+end_src

**** debug

#+header: :noweb-ref source-disabled
#+begin_src emacs-lisp
  ;;  (defun erw/default-directory-watcher (symbol newval operation where)
  ;;    "Watch for changes to `default-directory`.
  ;;  SYMBOL is the variable being watched.
  ;;  NEWVAL is the new value of the variable.
  ;;  OPERATION is the operation performed on the variable.
  ;;  WHERE is the buffer where the variable was changed."
  ;;    (message "default-directory changed in %s: %s â†’ %s"
  ;;             (buffer-name where)
  ;;             (symbol-value symbol)  ;; Old value
  ;;             newval))  ;; New value
  ;;
  ;; (add-variable-watcher 'default-directory #'erw/default-directory-watcher)
  ;;
  ;; (remove-variable-watcher 'default-directory #'erw/default-directory-watcher)
#+end_src

**** straight

#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  ;; Ensure Org is loaded early
  (straight-use-package 'org)
#+end_src

**** use-package

#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  ;;  (unless (package-installed-p 'use-package)
  ;;    (package-refresh-contents)
  ;;    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t)) 
  ;; (setq use-package-always-defer t))
#+end_src

**** config
***** location
:PROPERTIES:
:customize_bool: true
:custom_id: _this-directory
:END:

#+name: source-elisp-this-directory
#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  (defcustom erw/this-directory "/home/erwann/github/rogard/persemacs/" "where this package is located"
    :group 'erw/config)
#+end_src

#+RESULTS: source-elisp-this-directory
: erw/this-directory

***** load

#+header: :noweb-ref source-init
#+begin_src emacs-lisp
  (let* ((remote-emacs-dir (expand-file-name "config" erw/this-directory)))
    (org-babel-load-file (expand-file-name "main.org" remote-emacs-dir)))
#+end_src

** sh
*** preamble
:PROPERTIES:
:customize_bool: true
:END:

#+header: :noweb-ref source-sh-preamble
#+name: sh-shebang
#+begin_src shell
  #!/usr/bin/env bash
#+end_src

*** symlink
**** link_name

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  link_name="${user_init_file}"

  if [[ -f "${link_name}" ]]; then
      cp "${link_name}" "${HOME}/.emacs.bak" || {
          echo "Failed to create backup of ${link_name}"; exit 1;
      }
  fi
#+end_src

**** target

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  target="${PWD}/config/init.el"

  if [[ ! -f "${target}" ]]; then
      echo "Target ${target} not found"; exit 1;
  fi
#+end_src

**** do-link

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  ln -sf "${target}" "${link_name}" || {
      echo "Failed to create symlink"; exit 1;
  }
#+end_src

**** launch-kill

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  emacs --batch --eval "(kill-emacs)" || {
      echo "Failed to launch Emacs with the new symlink"; exit 1;
  }
#+end_src

**** message 

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  echo "Symlink created and Emacs verified successfully."
#+end_src

* tangle
:PROPERTIES:
:custom_id: _tangle
:END:

** elisp
:PROPERTIES:
:header-args: :tangle "./config/init.el"
:END:

#+header: :noweb  yes
#+begin_src emacs-lisp
  <<source-init>>
#+end_src

** sh
:PROPERTIES:
:header-args: :tangle "./symlink.sh"
:END:

Requirement:
- Execute [[id:_load-init][=this=]]

#+header: :noweb  yes
#+begin_src sh
  <<source-sh-preamble>>
#+end_src

#+header: :noweb  yes
#+header: :var user_init_file=(expand-file-name user-init-file)
#+begin_src sh
  <<source-sh-symlink>>
#+end_src

* execute
:PROPERTIES:
:custom_id: _execute
:END:

** load-init
:PROPERTIES:
:custom_id: _load-init
:END:

#+begin_src emacs-lisp
  (load-file "./config/init.el")
#+end_src

** symlink
:PROPERTIES:
:postinit_bool: true
:END:

Requirement:
- Execute [[id:_load-init][=this=]]

#+begin_src emacs-lisp
  (require 'ob-shell)
#+end_src

#+begin_src sh
  (file='symlink.sh';
   if  [[ -f "$file" ]]; then
       chmod +x "$file"
       $SHELL "$file"
   else
       printf 'error: executable %s missing' "$file"
   fi
  )
#+end_src

#+RESULTS:

* trash
*** early

#+header: :noweb-ref source-init-disable
#+begin_src emacs-lisp
  ;; https://emacs.stackexchange.com/a/76249
  ;; (setq package-enable-at-startup nil) 
#+end_src

