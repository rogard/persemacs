#+title: Personal Emacs 
#+author: Erwann Rogard 
#+property: header-args :tangle no

#+begin_src org
This Emacs Org file contains a subset of my Emacs configuration, with the rest located in =.emacs.d=.
#+end_src

* doc
** abstract

#+begin_src org
  This file can be used to generate =.emacs.d/init.el= and =symlink.sh= within a session opened with ~emacs -Q~.
  Also see =.emacs.d/config.org=
#+end_src

** requirement
:PROPERTIES:
:custom_id: doc-req
:END:

Installed:
#+name: doc-req-install
| Package    | Purpose    |
|------------+------------|
| Emacs      | init.el    |
| Unix shell | symlink.sh |

** workflow

Description:
- Execute the source blocks below
- Process sparse trees as indicated
- Execute a second time to remove sparse trees

Customize:
#+begin_src emacs-lisp
  (org-occur "customize_bool: true")
#+end_src

Execute:
#+begin_src emacs-lisp
  (org-occur "prereq_bool: true")
#+end_src

Tangle:
#+begin_src emacs-lisp
  (org-occur "header-args: :tangle")
#+end_src

Execute:
#+begin_src emacs-lisp
  (org-occur "prereq_bool: false")
#+end_src

** reference

Managing source code:
- [[https://orgmode.org/manual/Working-with-Source-Code.html][Working with source code]]

Installation:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html][Package installation]]

* source
** elisp
*** prereq

To be able to tangle:
#+header: :noweb-ref source-elisp-prereq
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (org . t)
#+end_src

To be able to execute code from [[id:exec-sh][sh]].
#+header: :noweb-ref source-elisp-prereq
#+begin_src emacs-lisp
     (shell . t)
#+end_src

#+header: :noweb-ref source-elisp-prereq
#+begin_src emacs-lisp
     ))
#+end_src

*** init
**** attrib

#+header: :noweb-ref source-elisp-init
#+begin_src emacs-lisp
  ;; init.el --- Emacs init file
  ;; Adapted from:
  ;; - https://github.com/ianyepan/yay-evil-emacs
#+end_src

**** group

#+header: :noweb-ref source-elisp-init
#+begin_src emacs-lisp
  (defgroup erw/config nil "erw's config"
    :prefix "erw/config")
#+end_src

**** archives

#+header: :noweb-ref source-elisp-init
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
#+end_src

**** use-package

#+header: :noweb-ref source-elisp-init
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
  (setq use-package-always-ensure t)) 
  ;; (setq use-package-always-defer t))
#+end_src

**** config
***** location
:PROPERTIES:
:customize_bool: true
:custom_id: this-directory
:END:

#+name: source-elisp-this-directory
#+header: :noweb-ref source-elisp-init
#+begin_src emacs-lisp
  (defcustom erw/this-directory "/home/erwann/github/rogard/persemacs/" "where this package is located"
    :group 'erw/config)
#+end_src

***** load

#+header: :noweb-ref source-elisp-init
#+begin_src emacs-lisp
  (let* ((remote-emacs-dir (expand-file-name ".emacs.d" erw/this-directory)))
    (org-babel-load-file (expand-file-name "config.org" remote-emacs-dir)))
#+end_src

** sh
*** preamble
:PROPERTIES:
:customize_bool: true
:END:

#+header: :noweb-ref source-sh-preamble
#+name: sh-shebang
#+begin_src shell
  #!/usr/bin/env bash
#+end_src

*** symlink
**** link_name

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  link_name="${HOME}/.emacs"

  if [[ -f "${link_name}" ]]; then
      cp "${link_name}" "${HOME}/.emacs.bak" || {
          echo "Failed to create backup of ${link_name}"; exit 1;
      }
  fi
#+end_src

**** target

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  target="${PWD}/.emacs.d/init.el"

  if [[ ! -f "${target}" ]]; then
      echo "Target ${target} not found"; exit 1;
  fi
#+end_src

**** do-link

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  ln -sf "${target}" "${link_name}" || {
      echo "Failed to create symlink"; exit 1;
  }
#+end_src

**** launch-kill

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  emacs --batch --eval "(kill-emacs)" || {
      echo "Failed to launch Emacs with the new symlink"; exit 1;
  }
#+end_src

**** message 

#+header: :noweb-ref source-sh-symlink
#+begin_src sh
  echo "Symlink created and Emacs verified successfully."
#+end_src

* tangle
:PROPERTIES:
:custom_id: tangle
:END:

** elisp
:PROPERTIES:
:header-args: :tangle "./.emacs.d/init.el"
:END:

#+header: :noweb  yes
#+begin_src emacs-lisp
<<source-elisp-init>>
#+end_src

** sh
:PROPERTIES:
:header-args: :tangle "./symlink.sh"
:END:

#+header: :noweb  yes
#+begin_src emacs-lisp
  <<source-sh-preamble>>
  <<source-sh-symlink>>
#+end_src

* execute
:PROPERTIES:
:custom_id: execute
:END:

** elisp
:PROPERTIES:
:custom_id: exec-elisp
:END:

*** prereq
:PROPERTIES:
:prereq_bool: true
:END:

#+header: :noweb yes
#+begin_src emacs-lisp
  <<source-elisp-prereq>>
#+end_src

#+RESULTS:

** sh
:PROPERTIES:
:custom_id: exec-sh
:prereq_bool: false
:END:

#+begin_src sh
  (file='symlink.sh';
   if  [[ -f "$file" ]]; then
       chmod +x "$file"
       $SHELL "$file"
   else
       printf 'error: executable %s missing' "$file"
   fi
  )
#+end_src

#+RESULTS:
: Symlink created and Emacs verified successfully.


* trash
*** early

#+header: :noweb-ref source-elisp-init-disable
#+begin_src emacs-lisp
  ;; https://emacs.stackexchange.com/a/76249
  ;; (setq package-enable-at-startup nil) 
#+end_src

*** workaround

#+header: :noweb-ref source-elisp-init-disable
#+begin_src emacs-lisp
  ;; Emacs calls package-initialize before evaluating your init file (since 27.1)
  ;; (package-initialize) 
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3") ;; workaround bug in Emacs 26.2
#+end_src


