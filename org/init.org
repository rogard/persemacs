#+title: init.org
#+author: Erwann Rogard 
#+property: header-args :tangle no

* source
** elisp
*** comment

#+header: :noweb-ref el-init
#+begin_src emacs-lisp :results value raw
;; persemacs — Emacs configuration and functionality
;; Copyright (C) 2024—2025 — Erwann Rogard
;; Released under GPL 3.0
;; See https://www.gnu.org/licenses/gpl-3.0.en.html
#+end_src

*** const
**** tangle

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
    (defconst erw/init-tangle-prop
      '((:file "../org/config.org" :lang "emacs-lisp"))
      "File+lang pairs to tangle as part of initialization")
#+end_src

#+RESULTS:
: erw/init-tangle-prop

*** function
**** debug

#+header: :noweb-ref el-disabled
#+begin_src emacs-lisp
  ;;  (defun erw/default-directory-watcher (symbol newval operation where)
  ;;    "Watch for changes to `default-directory`.
  ;;  SYMBOL is the variable being watched.
  ;;  NEWVAL is the new value of the variable.
  ;;  OPERATION is the operation performed on the variable.
  ;;  WHERE is the buffer where the variable was changed."
  ;;    (message "default-directory changed in %s: %s → %s"
  ;;             (buffer-name where)
  ;;             (symbol-value symbol)  ;; Old value
  ;;             newval))  ;; New value
  ;;
  ;; (add-variable-watcher 'default-directory #'erw/default-directory-watcher)
  ;;
  ;; (remove-variable-watcher 'default-directory #'erw/default-directory-watcher)
#+end_src

*** eval
**** manager

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  ;; https://github.com/radian-software/straight.el?tab=readme-ov-file#getting-started
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:
: t

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  ;; Ensure Org is loaded early
  (straight-use-package 'org)
#+end_src

#+RESULTS:
: t

**** package

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

#+RESULTS:
: t

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  ;;  (unless (package-installed-p 'use-package)
  ;;    (package-refresh-contents)
  ;;    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t))
  ;; (setq use-package-always-defer t))
#+end_src

#+RESULTS:
: t

**** other

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  (let ((dir-name (file-name-directory
  		 (or (file-truename load-file-name) buffer-file-name))))
    (dolist (pair erw/init-tangle-prop)
      (let ((source-file (plist-get pair :file))
  	  (source-lang (plist-get pair :lang)))
        (with-current-buffer (find-file-noselect (expand-file-name source-file dir-name))
  	(dolist (target-file (org-babel-tangle nil nil source-lang))
  	  (load-file target-file))))))
#+end_src

#+RESULTS:

** sh
*** shebang
:PROPERTIES:
:customize_bool: true
:END:

#+header: :noweb-ref sh-shebang
#+name: sh-shebang
#+begin_src shell
  #!/usr/bin/env bash
#+end_src

*** symlink
**** link_name

#+header: :noweb-ref sh-symlink
#+begin_src sh
  if [[ -f "${link_name}" ]]; then      
      cp "${link_name}" "${link_name}.bak" || {
          echo "Failed to create backup of ${link_name}"; exit 1;
      }
  fi
#+end_src

**** target

#+header: :noweb-ref sh-symlink
#+begin_src sh
  target="$(cd .. && pwd)/el/init.el"

  if [[ ! -f "${target}" ]]; then
      echo "Target ${target} not found"; exit 1;
  fi
#+end_src

**** do-link

#+header: :noweb-ref sh-symlink
#+begin_src sh
  ln -sf "${target}" "${link_name}" || {
      echo "Failed to create symlink"; exit 1;
  }
#+end_src

**** launch-kill

#+header: :noweb-ref sh-symlink
#+begin_src sh
  emacs --batch --eval "(kill-emacs)" || {
      echo "Failed to launch Emacs with the new symlink"; exit 1;
  }
#+end_src

**** message 

#+header: :noweb-ref sh-symlink
#+begin_src sh
  echo "Symlink created and Emacs verified successfully."
#+end_src

* tangle
:PROPERTIES:
:custom_id: _tangle
:END:

** elisp
:PROPERTIES:
:header-args: :tangle "../el/init.el"
:END:

#+header: :noweb yes
#+begin_src emacs-lisp
  <<el-init>>
#+end_src

#+RESULTS:

** sh
:PROPERTIES:
:header-args: :tangle "../sh/symlink.sh"
:END:

#+begin_src emacs-lisp
;;  (require 'ob-sh)
#+end_src

#+begin_src emacs-lisp
;;  (org-babel-do-load-languages
;;   'org-babel-load-languages
;;  '((sh . t)))
#+end_src

TODO
- Set link_name using =user-init-file=

#+header: :noweb yes
#+begin_src sh
  <<sh-shebang>>
  link_name=${HOME}/.emacs
  <<sh-symlink>>
#+end_src

* execute
** sh

#+header: :noweb yes
#+begin_src emacs-lisp
  (load-file (expand-file-name "init.el" "../el"))
#+end_src

#+RESULTS:
: t

TODO
- Make executable

#+begin_src sh
  file="../sh/symlink.sh"
  chmod +x "${file}"
  source "${file}"
#+end_src

* scratchpad
