#+title: init.org
#+author: Erwann Rogard 
#+property: header-args :tangle no

This is meta-code for generating Emacs initialization file and ensuring it is loaded at startup.

* doc

Workflow:
- Customize [[id:el-parameter-add][parameters]]
- Follow the steps under [[id:execute][execute]]

Noweb-ref:
- =el-meta= : code used in place
- =el-init= : code to be tangled

* source
** elisp
*** comment

#+name: el-license
#+begin_src emacs-lisp :results value raw
;; persemacs — Emacs configuration and functionality
;; Copyright (C) 2024—2025 — Erwann Rogard
;; Released under GPL 3.0
;; See https://www.gnu.org/licenses/gpl-3.0.en.html
#+end_src

*** parameter
**** list

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (defvar erw/init-parameter-list nil "Initialization customization (KEY . (VALUE .DESCRIPTION))")
#+end_src

**** macro

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (defmacro erw/init-parameter-add (key value string)
    "Add a key-value-string to the `erw/init-parameter-list`."
    `(push (cons ,key (cons ,value ,string)) erw/init-parameter-list))
#+end_src

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (defun erw/init-parameter-value (key)
    "Retrieve the value associated with KEY from `erw/init-parameter-list`."
    (car (cdr (assoc key erw/init-parameter-list))))
#+end_src

**** add
:PROPERTIES:
:custom_id: el-parameter-add
:customize_bool: true
:END:

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (erw/init-parameter-add  "init-vc-el" "../el/init.el" "Emacs initialization file (under version control)")
#+end_src

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (erw/init-parameter-add  "init-startup"
  			 ;; guard necessary when testing =el-meta=)
  			 (or user-init-file "~/.emacs")
  			 "Emacs initialization file (loaded at startup)")
#+end_src

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (erw/init-parameter-add  "link-sh" "../sh/link.sh" "Ensures Emacs loads the initialization file")
#+end_src

#+header: :noweb-ref el-meta
#+begin_src emacs-lisp
  (erw/init-parameter-add
   "delegate-org"
   '((:file "../org/config.org" :lang "emacs-lisp"))
   "List of Org files to delegate to: each is a plist with `:file` (path relative to `init.el`) and `:lang` (the source block language).")
#+end_src

*** package
**** straight

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  ;; https://github.com/radian-software/straight.el?tab=readme-ov-file#getting-started
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
  					      'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

#+RESULTS:
: t

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  (straight-use-package 'use-package)
#+end_src

#+header: :noweb-ref el-scratch
#+begin_src emacs-lisp
  ;; https://emacs.stackexchange.com/questions/80853/installing-a-package-with-straight-fails-with-the-error-use-package-unrecog
  (straight-use-package-mode 1)
#+end_src

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  (straight-use-package 'org)
#+end_src

#+RESULTS:
: t

**** use-package

#+header: :noweb-ref el-init
#+begin_src emacs-lisp
  ;;  (unless (package-installed-p 'use-package)
  ;;    (package-refresh-contents)
  ;;    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t))
  ;; (setq use-package-always-defer t))
#+end_src

#+RESULTS:
: t

*** delegate

#+header: :noweb-ref el-delegate
#+begin_src emacs-lisp
  (let ((dir-name (file-name-directory
  		 (or (file-truename load-file-name) buffer-file-name))))
    (dolist (pair meta-delegate-list) ;; beta
      (let ((source-file (plist-get pair :file))
  	  (source-lang (plist-get pair :lang)))
        (with-current-buffer (find-file-noselect (expand-file-name source-file dir-name))
  	(message "Visiting buffer %s" (buffer-name))
  	(let ((target-list (org-babel-tangle nil nil source-lang)))
  	  (dolist (target-file target-list)
  	    (load-file target-file)))))))
#+end_src

#+RESULTS:

** sh
*** shebang
:PROPERTIES:
:customize: true
:END:

#+header: :noweb-ref sh-shebang
#+name: sh-shebang
#+begin_src shell
  #!/usr/bin/env bash
#+end_src

*** startup
**** link

#+header: :noweb-ref sh-startup
#+begin_src sh
  if [[ -f "${meta_startup}" ]]; then      
      cp "${meta_startup}" "${meta_startup}.bak" || {
          echo "Failed to create backup of ${meta_startup}"; exit 1;
      }
  fi
#+end_src

**** vc_el

#+header: :noweb-ref sh-startup
#+begin_src sh
  if [[ ! -f "${meta_vc_el}" ]]; then
      echo "Init file ${meta_vc_el} not found"; exit 1;
  fi
#+end_src

**** do-link

#+header: :noweb-ref sh-startup
#+begin_src sh
  ln -sf "${meta_vc_el}" "${meta_startup}" || {
      echo "Failed to create link"; exit 1;
  }
#+end_src

**** launch-kill

#+header: :noweb-ref sh-startup
#+begin_src sh
  emacs --batch --eval "(kill-emacs)" || {
      echo "Failed to launch Emacs with the new link"; exit 1;
  }
#+end_src

**** message 

#+header: :noweb-ref sh-startup
#+begin_src sh
  echo "Link created and Emacs verified successfully."
#+end_src

* execute
:properties:
:custom_id: execute
:end:

** elisp
*** meta
:properties:
:custom_id: exec-el-meta
:end:

Over this block, do:
- ~M-x ctrl-c-ctrl-c~
#+header: :noweb yes
#+begin_src emacs-lisp :tangle "../el/meta.el"
  <<el-meta>>
  (let (result)
    (dolist (key '("init-vc-el" "init-startup" "link-sh"))
      (push (expand-file-name (erw/init-parameter-value key))
            result))
    result)
#+end_src

#+RESULTS:
| /home/erwann/github/rogard/persemacs/sh/link.sh | /home/erwann/.emacs | /home/erwann/github/rogard/persemacs/el/init.el |

Check:
- ~M-x ctrl-c-ctrl-c~
#+header: :noweb yes
#+begin_src emacs-lisp
  (erw/init-parameter-value "delegate-org")
#+end_src

#+RESULTS:
| :file | ../org/config.org | :lang | emacs-lisp |

*** tangle
:PROPERTIES:
:header-args: :tangle (expand-file-name (erw/init-parameter-value "init-vc-el"))
:END:

Execute:
- ~org-narrow-to-subtree~
- ~M-x org-babel-tangle~
- ~M-x widen~

#+header: :noweb yes
#+begin_src emacs-lisp 
  <<el-license>>
#+end_src

#+header: :noweb yes
#+begin_src emacs-lisp 
  <<el-init>>
#+end_src

#+begin_src emacs-lisp
  (eval-and-compile
#+end_src

#+header: :noweb yes
#+header: :var meta-delegate-list=(erw/init-parameter-value "delegate-org")
#+begin_src emacs-lisp 
  <<el-delegate>>
#+end_src

#+begin_src emacs-lisp
  )
#+end_src

** sh
*** meta
:properties:
:custom_id: exec-sh-meta
:end:

Execute:
- This [[#exec-el-meta][headline]]'s steps
- ~M-x ctrl-c-ctrl-c~
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))
#+end_src

#+RESULTS:

*** tangle
:PROPERTIES:
:custom_id: exec-sh-tangle
:END:

Execute:
- ~M-x org-narrow-to-subtree~
- ~M-x org-babel-tangle~
- ~M-x widen~

#+header: :noweb yes
#+begin_src sh
  <<sh-shebang>>
#+end_src

#+header: :noweb yes
#+header: :tangle (expand-file-name (erw/init-parameter-value "link-sh"))
#+header: :var meta_vc_el=(expand-file-name (erw/init-parameter-value "init-vc-el"))
#+header: :var meta_startup=(expand-file-name (erw/init-parameter-value "init-startup"))
#+begin_src sh
  <<sh-startup>>
#+end_src

*** link

Execute:
- This [[#exec-el-meta][headline]]'s steps
- ~M-x ctrl-c-ctrl-c~
#+header: :var link_sh=(expand-file-name (erw/init-parameter-value "link-sh"))
#+begin_src sh
  chmod +x "${link_sh}"
  source "${link_sh}"
#+end_src

#+RESULTS:
: Link created and Emacs verified successfully.

