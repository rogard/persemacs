#+title: persemacs-extension
#+author: Erwann Rogard
#+property: header-args :tangle no

#+name: doc-lead
#+begin_src org
  This is a standalone Emacs Org file containing emacs-lisp functionality.
#+end_src

* license

#+name: el-license
#+begin_src emacs-lisp
  ;;  persemacs-extension — Emacs Lisp functionality
  ;;  Copyright (C) 2024—2025 — Erwann Rogard
  ;;  Released under GPL 3.0
  ;;  See https://www.gnu.org/licenses/gpl-3.0.en.html
#+end_src

* source
** el
*** support
**** search

Evaluate (~C-c C-c~)
#+begin_src emacs-lisp
  (org-ql-search (current-buffer)
    '(property "customize" "true")
    :title "Customize Properties")
#+end_src

**** TODO [#C] noweb-ref
:PROPERTIES:
:created_on: <2025-05-27 Tue 00:11>
:uname:    @elitebook
:END:
:LOGBOOK:
- Note taken on [2025-05-27 Tue 00:12] \\
  Find a way to tangle this as an org file, while still being able to use it locally.
:END:

***** wrap

 #+name: el-wrap
 #+header: :var body=""
 #+header: :var ref=""
 #+header: :var lang=""
 #+begin_src emacs-lisp
   (concat "#+header: :noweb-ref " ref "\n" "#+begin_src " lang "\n" body "\n" "#+end_src")
 #+end_src

***** collect

#+name: el-collect
#+header: :var head="^sh-"
#+header: :var ref-list='()
#+header: :var tail="$"
#+header: :var order=':buffer
#+header: :results raw
#+begin_src emacs-lisp
  (string-join
   (er317/noweb-ref-collect :head head :ref-list ref-list :tail tail :order order) "\n")
#+end_src

#+RESULTS:
: er317/noweb-ref-collect

***** assemble

#+name: el-assemble
#+header: :var head="^json-"
#+header: :var ref-list='()
#+header: :var tail="$"
#+header: :var key-list='()
#+header: :var parse-fn='json-read-from-string
#+header: :var encode-fn='json-encode
#+begin_src emacs-lisp
  (er317/noweb-ref-assemble
   :head head
   :ref-list ref-list
   :tail tail
   :key-list key-list
   :parse-fn parse-fn
   :encode-fn encode-fn)
#+end_src

***** json-pp

#+name: el-json-pp
#+header: :var json=json-object
#+begin_src emacs-lisp
  (with-temp-buffer (insert json) (json-pretty-print (point-min) (point-max)) (buffer-string))
#+end_src

*** module
**** list
***** module
****** plist-if
#+header: :noweb-ref el-list-beta
#+begin_src emacs-lisp
  (cl-defun er317/plist-if (&rest keyval-list)
    "Return a plist containing only the key-value pairs from KEYVAL-LIST
whose values are non-nil."
    (let ((result nil))
      (while keyval-list
        (let ((key (pop keyval-list))
              (value (pop keyval-list)))
          (when value
            (setq result (append result (list key value))))))
      result))
#+end_src

#+RESULTS:
: er317/plist-if

#+header: :results raw verbatim
#+begin_src emacs-lisp
  (plist-get (er317/plist-if :foo "foo" :bar nil :qux "qux") :qux)
#+end_src

#+RESULTS:
"qux"

**** function
***** module
****** compose

#+header: :noweb-ref el-function-beta
#+begin_src emacs-lisp
  (defun er317/compose (arg &rest functions)
    "Apply a sequence of FUNCTIONS to ARG in composition order."
    (cl-reduce (lambda (acc fn) (funcall fn acc))
               (reverse functions)
               :initial-value arg))
#+end_src

#+RESULTS:
: er317/compose

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
  (er317/compose 4 #'sqrt (lambda (x) (+ 1 x)))
#+end_src

#+RESULTS:
: 3.0

**** filesys
***** preamble

#+header: :noweb-ref el-filesys-beta
#+begin_src emacs-lisp
  (load-file "../el/list.el")
#+end_src

***** module
****** unique-file
******* directory
:PROPERTIES:
:customize: true
:END:

#+header: :noweb-ref el-filesys-beta
#+begin_src emacs-lisp
  (defconst er317/filesys-unique-directory (file-name-as-directory "~/unique") "Directory for storing unique files")
#+end_src

#+RESULTS:
: er317/filesys-unique-directory

******* make

#+header: :noweb-ref el-filesys-beta
#+begin_src emacs-lisp
  (cl-defun er317/filesys-unique-make
      (&key ((:ext ext-string))
            ((:directory directory-string) er317/filesys-unique-directory)
            ((:only-name only-name-bool)))
    "Create a uniquely named file in the given directory"
    (let* ((prefix (file-name-as-directory directory-string))
           (suffix (when ext-string (concat "." ext-string)))
           (dir-flag nil))
      (make-temp-file prefix dir-flag suffix)))
#+end_src

#+RESULTS:
: er317/filesys-unique-make

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
  (let* ((directory-string nil)
    (args (append (list :ext "org" :only-name t)
                  (when directory-string (list :directory directory-string)))))
    (apply #'er317/filesys-unique-make args))
#+end_src

#+RESULTS:
: /home/erwann/unique/ZlyJWc.org

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
  (let* ((directory-string "~/unique")
    (args (append (list :ext "org" :only-name t)
                  (when directory-string (list :directory directory-string)))))
    (apply #'er317/filesys-unique-make args))
#+end_src

#+RESULTS:
: /home/erwann/unique/GPmUqe.org

******* clone

#+header: :noweb-ref el-filesys-beta
#+begin_src emacs-lisp
  (cl-defun er317/filesys-unique-clone
      (&key
       ((:source source-file))
       ((:directory directory-string))
       ((:do-trash trash-bool) t))
    "Clone SOURCE-FILE to a uniquely named file in DIRECTORY-STRING.
         If DO-TRASH is non-nil, move the source file to trash.
         Returns the target-file."
    (let ((target-file
  	 (let ((args (er317/plist-if :ext (file-name-extension source-file) :only-name nil :directory directory-string)))
    	   (apply #'er317/filesys-unique-make args))))
      (with-temp-buffer
        (insert-file-contents source-file)
        (write-region (point-min) (point-max) target-file))
      (kill-new target-file)
      (message "Cloned source file (%s) to unique file: %s" source-file target-file)
      (when trash-bool
        (move-file-to-trash source-file)
        (message "Moved source file to trash: %s" source-file))
      target-file))
#+end_src

#+RESULTS:
: er317/filesys-unique-clone

******* interactive
******** code

#+header: :noweb-ref el-filesys-beta
#+begin_src emacs-lisp
  (cl-defun er317/filesys-unique-clone-interactive
      (source-file &key
                   ((:directory directory-string))
                   ((:do-trash trash-bool)))
    "Interactively clone SOURCE-FILE to a uniquely named one."
    (interactive "fEnter source file")
    ;; Warn if the source file is open in any buffer
    (dolist (buf (buffer-list))
      (when (and (buffer-file-name buf)
                 (file-equal-p source-file (buffer-file-name buf)))
        (warn "About to clone the file opened in buffer: %s" (buffer-name buf))))
    ;; Prepare arguments and call the cloning function
    (let ((plist (er317/plist-if :source source-file :directory directory-string :do-trash trash-bool)))
      (let ((target-file (apply #'er317/filesys-unique-clone plist)))
      (kill-new target-file)
      (message "Cloned %s to: %s (path copied to clipboard)" source-file target-file))))
#+end_src

#+RESULTS:
: er317/filesys-unique-clone-interactive

**** src-block
***** module
****** info

#+header: :noweb-ref el-src-block-beta
#+begin_src emacs-lisp
  (defun er317/src-block-info (name &optional no-eval)
    "Gets info of block NAME"
    (let ((block (org-babel-find-named-block name)))
  	 (when block
  		 (save-excursion
                     (goto-char block)
                     (org-babel-get-src-block-info no-eval)))))
#+end_src

#+RESULTS:
: er317/src-block-info

#+header:  :noweb-ref el-example
#+begin_src emacs-lisp
(er317/src-block-info "json-foo")
#+end_src

#+RESULTS:
| json | { "key" : "X" } | ((:colname-names) (:rowname-names) (:result-params replace) (:result-type . value) (:results . replace) (:exports . code) (:tangle . no) (:hlines . no) (:noweb . no) (:cache . no) (:session . none)) |   | json-foo-bar | 1239 | (ref:%s) |

#+header: :noweb-ref el-example
#+header: :results verbatim raw
#+begin_src emacs-lisp
  (er317/src-block-properties "bar-qux" :header)
#+end_src

#+RESULTS:
((":var value=\"qux\""))

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
  (org-babel-parse-header-arguments
   (mapconcat (lambda (pair) (concat (car pair) " " (cadr pair)))
              (er317/src-block-properties "bar-qux" :header)
              " "))
#+end_src

#+RESULTS:
: ((:var . value="qux"))

**** noweb-ref
:PROPERTIES:
:CUSTOM_ID: source-el-noweb-ref
:EN:D

***** preamble

#+header: :noweb-ref el-filesys-beta
#+begin_src emacs-lisp
  (load-file "../el/shell.el")
#+end_src

***** module
****** expand

#+header: :noweb-ref el-noweb
#+begin_src emacs-lisp
  (cl-defun er317/noweb-ref-expand (&key regex)
    "Expands all source blocks whose :noweb-ref matches REGEX and returns their expanded contents, joined by SEP."
    (let ((results '()))
      (org-element-map (org-element-parse-buffer) 'src-block
        (lambda (src)
          (let* ((begin (org-element-property :begin src))
                 (info (save-excursion
                         (goto-char begin)
                         (org-babel-get-src-block-info t)))
                 (params (nth 2 info))  ; header arguments parsed by org-babel
                 (ref (cdr (assoc :noweb-ref params))))
            ;; (message "DEBUG parsed params: %S" params)
            (when (and ref (string-match-p regex ref))
              (let ((expanded (org-babel-expand-noweb-references info)))
                (push expanded results))))))
      (nreverse results)))
#+end_src

#+RESULTS:
: er317/noweb-ref-expand

#+header: :noweb yes
#+header: :results verbatim
#+header: :noweb-ref el-example
#+begin_src emacs-lisp
   (er317/noweb-ref-expand :regex "sh-\\(hello\\|ahoy\\)")
#+end_src

#+RESULTS:
: ("'Hello, world!'" "'Hello, debugger!'" "'Ahoy, planet!'")

****** TODO collect

Pending:
[ ] Test

#+header: :noweb-ref el-noweb
#+begin_src emacs-lisp
  (cl-defun er317/noweb-ref-collect
      (&key head ref-list tail (results '()) (order :buffer))
    "Collect source blocks matching REF-LIST in ORDER (:buffer or :ref-list)."
    (pcase order
      (:ref-list
       ;; One-by-one regex match per ref
       (if (null ref-list)
           results
         (let* ((ref (car ref-list))
                (regex (concat (or head "") ref (or tail "")))
                (segment-results (apply #'er317/noweb-ref-expand `(:regex ,regex))))
           (er317/noweb-ref-collect
            :head head
            :ref-list (cdr ref-list)
            :tail tail
            :results (append results segment-results)
            :order order))))
      (:buffer
       ;; Collapse ref-list into a single regex, match in buffer order
       (let* ((regex-body (mapconcat #'identity ref-list "\\|"))
              (regex (concat (or head "") "\\(" regex-body "\\)" (or tail "")))
              (segment-results (apply #'er317/noweb-ref-expand `(:regex ,regex))))
         (append results segment-results)))
      (_ (error "Unknown :order %s" order))))
#+end_src

#+RESULTS:
: er317/noweb-ref-collect

Evaluate (~C-c C-c~)
#+call: el-collect[:post el-wrap(body=*this*,lang="sh",ref="sh-coll")](ref-list='("shebang" "cat-eof" "hello" "ahoy" "eof"), order=':buffer)

#+RESULTS:
#+header: :noweb-ref sh-coll
#+begin_src sh
#!/usr/bin/env bash
cat << EOF 
'Ahoy, planet!'
'Hello, world!'
'Hello, debugger!'
EOF
#+end_src

Evaluate (~C-c C-c~)
#+call: el-collect[:post el-wrap(body=*this*,lang="sh",ref="sh-coll")](ref-list='("shebang" "cat-eof" "hello" "ahoy" "eof"), order=':ref-list)

#+RESULTS:
#+header: :noweb-ref sh-coll
#+begin_src sh
#!/usr/bin/env bash
cat << EOF 
'Hello, world!'
'Hello, debugger!'
'Ahoy, planet!'
EOF
#+end_src

****** encode

#+header: :noweb-ref el-noweb
#+begin_src emacs-lisp
  (cl-defun er317/noweb-ref-assemble
      (&key key-list head ref-list tail parse-fn encode-fn)
    "Expand noweb REF-LIST, each surrounded by HEAD and TAIL.
  PARSE-FN parses the raw strings; 
  ENCODE-FN turns parsed data into final output.
  When provided, KEY-LIST is passed to ENCODE-FN."
    (let* ((raw-blocks (er317/noweb-ref-collect :head head :ref-list ref-list :tail tail))
           (parsed-list (mapcar parse-fn raw-blocks)))
      (when (and key-list
                 (/= (length key-list) (length parsed-list)))
        (error "key-list and parsed-list must be of equal length"))
      (funcall encode-fn
               (if key-list
                   (cl-pairlis key-list parsed-list)
                 parsed-list))))
#+end_src

#+RESULTS:
: er317/noweb-ref-assemble

***** example

#+name: json-object
#+call: el-assemble[:results raw](ref-list='("foo" "bar" "qux"), key-list='("foo" "bar" "qux"))

#+RESULTS: json-object
{"foo":{"key":"X"},"bar":{"key":"Y"},"qux":[{"key":"W"},{"key":"Z"}]}

#+name: json-pp
#+call: el-json-pp[:results raw](json=json-object)

#+RESULTS: json-pp
{
  "foo": {
    "key": "X"
  },
  "bar": {
    "key": "Y"
  },
  "qux": [
    {
      "key": "W"
    },
    {
      "key": "Z"
    }
  ]
}

#+call: el-assemble[:post el-wrap(body=*this*,lang="json",ref="json-merge") :results raw](ref-list='("foo" "bar" "qux"), key-list='("foo" "bar" "qux"))

#+RESULTS:
#+header: :noweb-ref json-merge
#+begin_src json
{"foo":{"key":"X"},"bar":{"key":"Y"},"qux":[{"key":"W"},{"key":"Z"}]}
#+end_src

**** org
***** module
****** element

#+header: :noweb-ref el-org-beta
#+begin_src emacs-lisp
  (defun er317/filter-block-names (regex &optional file)
    "Filter the source block names using REGEX in FILE."
    (let ((block-names (reverse (org-babel-src-block-names file))))
      (cl-remove-if-not (lambda (block) (string-match-p regex block)) block-names)))
#+end_src

#+RESULTS:
: er317/filter-block-names

#+begin_src emacs-lisp
  (defun er317/element-headers-as-properties (element) "Element properties retrievable using plist-get"
         (flatten-list  (mapcar (lambda (string) (org-babel-parse-header-arguments string)) (org-element-property element))))
#+end_src

****** src-block

#+header: :noweb-ref el-src-block-beta
#+begin_src emacs-lisp
  (defun er317/src-block-element (name) "Return the whole block element"
         (save-excursion
  	 (goto-char (org-babel-find-named-block name))
  	 (org-element-at-point)))
#+end_src

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
  (er317/src-block-element "bar-qux")
#+end_src

#+header: :noweb-ref el-src-block-beta
#+begin_src emacs-lisp
  (defun er317/src-block-properties (name &rest properties)
    "Return block properties from the named block element. Defaults to :value if no properties are given."
    (let* ((element (er317/src-block-element name))  ;; Use er317/src-block-element to get the block
           (props (if properties
                      properties
                    '(:value))))  ;; Default to :value if no properties are provided
      (mapcar (lambda (prop)
                (org-element-property prop element))  ;; Get each property using org-element-property
              props)))
#+end_src

****** subtree
******* paste

#+header: :noweb-ref el-org
#+begin_src emacs-lisp
    (cl-defun er317/org-subtree-paste
        (&key (target-file (buffer-file-name))
              (target-pos (point))
              (level-fn (lambda (level) (+ level 1))))
      "Paste into TARGET, the subtree in the clipboard.
    The level is set by LEVEL-FN; by default = point level +1.
  Tip: use `org-cut-subtree` prior to this one."
      (interactive)
      (unless (org-kill-is-subtree-p)
        (user-error "Clipboard does not contain a valid Org subtree"))
      (let (level)
        (with-current-buffer (find-file-noselect target-file)
          (goto-char target-pos)
          (setq level (funcall level-fn (org-current-level)))
  	(message "DEBUG: %s" level)
          (org-end-of-subtree)
          (org-paste-subtree level nil nil t)
          (save-buffer)
  	(format "Pasted subtree at level %d in %s" level target-file))))
#+end_src

#+RESULTS:
: er317/org-subtree--paste

******* promote

#+header: :noweb-ref org-subtree-beta
#+begin_src emacs-lisp
(defun er317/org-subtree-promote ()
  "Promote the current Org subtree.
If the top heading is level 1, replace it with a `#+TITLE:` line,
then promote the rest of the subtree."
  (interactive)
  (save-excursion
    (org-back-to-heading t)
    (let ((level (org-current-level))
          (title (org-get-heading t t t t))
          (heading-start (point))
          region-start region-end)
      (if (= level 1)
          (progn
            ;; Save where heading starts
            (setq region-start (progn
                                 (forward-line 1)
                                 (point)))
            (org-end-of-subtree t t)
            (setq region-end (point))

            ;; Replace heading line with #+TITLE:
            (goto-char heading-start)
            (delete-region (line-beginning-position) (1+ (line-end-position)))
            (insert (format "#+TITLE: %s\n" title))

            ;; Promote nested subtree (if any)
            (when (< region-start region-end)
              (org-map-region
               (lambda () (org-promote-subtree))
               region-start region-end)))
        ;; Otherwise just promote normally
        (org-promote-subtree)))))
#+end_src

#+RESULTS:
: er317/org-subtree-promote

****** refactor
******* define

#+header: :noweb-ref el-org-beta
#+begin_src emacs-lisp
  (cl-defmacro er317/org-refactor-define (&key
      					     ((:source source-fn))
      					     ((:args args-lambda))
      					     ((:result result-lambda))
      					     ((:target target-fn)))
    `(cl-defun ,target-fn (&rest keyval)
       ,(format "Wrapper around `%s` with optional input/output transformation." source-fn)
       (let* ((result-raw (if ,args-lambda
                              (let ((args-list (apply ,args-lambda keyval)))
                                (apply ,source-fn args-list))
                            (,source-fn)))
              (result (if ,result-lambda
  			(funcall ,result-lambda result-raw)
                        (progn
  			(warn "No output function found for %s; returning raw output instead" ',target-fn)
  			result-raw))))
         result)))
#+end_src

#+RESULTS:
: er317/org-refactor-define

******* example

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
    (defun my-source-fn (x y) (+ x y))
#+end_src

#+RESULTS:
: my-source-fn

#+header: :noweb-ref el-example
#+begin_src emacs-lisp  
  (er317/org-refactor-define
   :source 'my-source-fn
   :args (lambda (&rest kv) (list (plist-get kv :x) (plist-get kv :y))) ;; ignore input
   :result (lambda (result) (* result 10))
   :target my-wrapped-fn)
#+end_src

#+RESULTS:
: my-wrapped-fn

#+header: :noweb-ref el-example
#+begin_src emacs-lisp  
  (my-wrapped-fn :x 2 :y 3) ;; => 30
#+end_src

#+RESULTS:
: 50

******* apply

#+header: :noweb-ref el-org-beta
#+begin_src emacs-lisp
  (er317/org-refactor-define
   :source org-heading-components
   :target er317/org-heading-components
   :args nil
   :result (lambda (list)
             (let ((keyval-list '(:level 0 :reduced-level 1 :todo-keyword 2 :priority 3 :headline 4 :tags 5))
                   (result '()))
               (while keyval-list
                 (let ((key (pop keyval-list))
                       (pos (pop keyval-list)))
                   (push key result)
                   (push (nth pos list) result)))
               (nreverse result))))
#+end_src

#+RESULTS:
: er317/org-heading-components

****** global

#+header: :noweb-ref el-org-beta
#+begin_src emacs-lisp
  (cl-defun er317/org-global-header-position-next (&optional buffer)
    "Return the BUFFER position where the next global header line (e.g. `#+property:`) should be inserted."
    (with-current-buffer (or buffer (current-buffer))
      (save-excursion
        (goto-char (point-min))
        (while (looking-at "^#\\+\\w+:")
          (forward-line 1))
        (point))))
#+end_src

***** property
****** define

#+header: :noweb-ref el-org-beta
#+begin_src emacs-lisp
  (cl-defmacro er317/org-property-define (&key
                                        ((:name name-symb))
                                        ((:key key-string))
                                        ((:value value-lambda)))
    "Create a function NAME-SYMB to set Org property KEY-STRING using VALUE-LAMBDA."
    (let ((name-symb (or name-symb
                         (intern (concat "er317/org-property-" key-string)))))
      `(cl-defun ,name-symb (&rest keyval)
         ,(format "Set the Org property %s using a computed value." key-string)
         (let ((value (save-excursion (apply ,value-lambda keyval))))
           (org-set-property ,key-string value)))))
#+end_src

#+RESULTS:
: er317/org-property-define

****** apply

#+header: :noweb-ref el-org-beta
#+begin_src emacs-lisp
  (er317/org-property-define
   :key "parent-id"
   :value (lambda ()
            (when (org-up-heading-safe)
              (org-id-get-create))))
#+end_src

#+RESULTS:
: er317/org-property-parent-id

**** shell
***** module
****** jq

#+header: :noweb-ref el-shell
#+begin_src emacs-lisp
  (cl-defun er317/jq-file (&key filter file options)
    "Apply a jq FILTER to a JSON FILE and return the result."
    (let* ((parts (delq nil (append (list "jq") options (list (format "'%s'" filter) file)))) (command (string-join parts " ")))
;;    (message "DEBUG: parts: %s" parts)
;;    (message "DEBUG: command: %s" command)
    (shell-command-to-string command)))
#+end_src

#+RESULTS:
: er317/jq-file

****** string

#+header: :noweb-ref el-shell
#+begin_src emacs-lisp
  (cl-defun er317/jq-string (&key filter string options)
    "Apply a jq filter to a JSON string and return the result."
    (let* ((temp-file (make-temp-file nil nil ".json"))
           (result (progn
                     (with-temp-file temp-file
                       (insert string))
                     (er317/jq-file :filter filter :file temp-file :options options))))
      (delete-file temp-file)
      (format "%s" result)))
#+end_src

#+RESULTS:
: er317/jq-string

#+header: :noweb-ref el-example
#+header: :results raw
#+header: :var json-object=(org-babel-ref-resolve "json-foo")
#+header: :wrap src json
#+begin_src emacs-lisp  
  (er317/jq-string :filter "." :string json-object :options '("-c"))
#+end_src

#+RESULTS:
#+begin_src json
{"key":"X"}
#+end_src

** json
*** test-cases

#+header: :noweb-ref json-foo
#+begin_src json
  {
      "key" : "X"
  }
#+end_src

#+header: :noweb-ref json-bar
#+begin_src json
  {
      "key" : "Y"
  }
#+end_src

#+header: :noweb-ref json-qux
#+begin_src json
  [
      {
  	"key":"W"
      },
      {
  	"key":"Z"
      }
  ]
#+end_src

#+header: :noweb-ref json-baz
#+begin_src sh
  {
      "file":
      ["John	Doe",
       "Jane Smith"]
  }
#+end_src

** org
*** support

#+header: :noweb-ref org-support
#+begin_src org
  ,#+name: el-collect
  ,#+header: :results raw
  ,#+header: :var head="^sh-"
  ,#+header: :var tail="$"
  ,#+header: :var ref-list='("foo" "bar" "foo")
  ,#+begin_src emacs-lisp
    (string-join
     (er317/noweb-ref-collect :head head :ref-list ref-list :tail tail) "\n")
  ,#+end_src
#+end_src

*** test-cases
**** tbl

#+name: tbl-foo-bar-string
| "foo" | "x" |
| "bar" | "y" |

#+name: tbl-foo-bar-dir
| "foo" | "./foo" |
| "bar" | "./bar" |
*** notes
**** TODO tangle
:PROPERTIES:
:created_on: <2025-05-22 Thu 20:10>
:uname:    @elitebook
:END:
:LOGBOOK:
- Note taken on [2025-05-22 Thu 20:11] \\
  TARGET-FILE not seem reliable
:END:

#+begin_src emacs-lisp
  (org-babel-tangle &optional ARG TARGET-FILE LANG-RE)
#+end_src

** sh
*** test-cases

#+header: :noweb-ref sh-shebang
#+begin_src sh
  #!/usr/bin/env bash
#+end_src

#+header: :noweb-ref sh-cat-eof
#+begin_src sh
  cat << EOF 
#+end_src

#+header: :noweb-ref sh-ahoy
#+begin_src sh
  'Ahoy, planet!'
#+end_src

#+header: :noweb-ref sh-hello
#+begin_src sh
  'Hello, world!'
#+end_src

#+header: :noweb-ref sh-hello
#+begin_src sh
  'Hello, debugger!'
#+end_src

#+header: :noweb-ref sh-eof
#+begin_src sh
  EOF
#+end_src

#+name: bar-qux
#+header: :var value="qux"
#+begin_src sh
  echo "${value}"
#+end_src

* tangle
** el
*** noweb
:PROPERTIES:
:header-args: :tangle "../el/noweb.el"
:END:

#+header: :noweb yes
#+begin_src emacs-lisp
  <<el-license>>
  <<el-noweb>>
#+end_src

*** json
:PROPERTIES:
:header-args: :tangle "../json/merge.json"
:END:

#+header: :noweb yes
#+begin_src json
  <<json-merge>>
#+end_src

*** org
:PROPERTIES:
:header-args: :tangle "../org/org.el"
:END:

#+header: :noweb yes
#+begin_src emacs-lisp
  <<el-license>>
  <<el-org>>
#+end_src

#+RESULTS:
: er317/noweb-concat

*** shell
:PROPERTIES:
:header-args: :tangle "../el/shell.el"
:END:

#+header: :noweb yes
#+begin_src emacs-lisp
  <<el-license>>
  <<el-shell>>
#+end_src
* trash
** table
:LOGBOOK:
- Note taken on [2025-05-25 Sun 21:55] \\
  Works, but just not needed anymore.
:END:

*** module
**** field-address
***** code
#+header: :noweb-ref el-table
#+begin_src emacs-lisp
  (defun er317/function-table-field-address (index)
    "Table address for field INDEX"
    (format "@1$%d..@>$%d" index index))
  (defalias 'er317/field-address 'er317/function-table-field-address)
#+end_src

#+RESULTS:
: er317/field-address

***** example
#+header: :noweb-ref el-example
#+begin_src emacs-lisp
  (er317/field-address 2)
#+end_src

#+RESULTS:
: @1$2..@>$2

**** get-range
***** code
#+header: :noweb-ref el-table
#+begin_src emacs-lisp
  (defun er317/function-table-get-range-at-file (tbl-id range-address &optional file-name)
    "Get list of values in RANGE-ADDRESS from TBL-ID at FILE-NAME.
       Credits: https://redd.it/r2nig7"
    (let ((file-name (or file-name (buffer-file-name (current-buffer)))))
      (with-current-buffer (find-file-noselect file-name)
        (let ((result-with-properties
               (org-table-get-remote-range tbl-id range-address)))
          (mapcar (lambda (s)
                    (substring-no-properties (substring s 1 -1)))
                  result-with-properties)))))
  (defalias 'er317/table-range 'er317/function-table-get-range-at-file)
#+end_src

#+RESULTS:
: er317/table-range

***** example

#+header: :noweb-ref el-example
#+header: :results value verbatim
#+begin_src emacs-lisp
(er317/table-range "tbl-foo-bar-string" (format "@1$%d..@>$%d" 2 2))
#+end_src

#+RESULTS:
: ("x" "y")

**** lookup
***** code
#+header: :noweb-ref el-table
#+begin_src emacs-lisp
    (defun er317/function-table-lookup (tbl-id key &optional file-name key-index value-index match-predicate)
      "Lookup field KEY-INDEX and return corresponding entry in field VALUE-INDEX from table TBL-ID."
      (interactive)
      (let ((key-address (er317/field-address (or key-index 1)))
            (value-address (er317/field-address (or value-index 2)))
            (file-name (or file-name (buffer-file-name (current-buffer))))
            (match-predicate (or match-predicate 'string-match-p)))
        (let ((key-range (er317/table-range tbl-id key-address file-name))
              (value-range (er317/table-range tbl-id value-address file-name)))
          (org-lookup-first key key-range value-range 'string-match-p))))
  (defalias 'er317/table-lookup 'er317/function-table-lookup)
#+end_src

#+RESULTS:
: er317/table-lookup

***** example

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
(er317/table-lookup "tbl-foo-bar-string" "foo")
#+end_src

#+RESULTS:
: x

#+header: :noweb-ref el-example
#+begin_src emacs-lisp
(er317/table-lookup "tbl-foo-bar-string" "bar")
#+end_src

#+RESULTS:
: y

* scratch
** sh

#+begin_src sh
  json=$(
      cat <<'EOF'
  {
    "file":
    ["John\tDoe",
     "Jane\tSmith"]
  }
  EOF
      )

  # Iterate over each line in the array, splitting on tab
  echo "$json" | jq -r '.file[]' | while IFS=$'\t' read -r first last; do
      printf 'first=%s; last=%s\n' "$first" "$last"
  done

#+end_src

#+RESULTS:
| first=John; | last=Doe   |
| first=Jane; | last=Smith |
