#+title persemacs-extra
#+author: Erwann Rogard
#+property: header-args :tangle no

#+name: doc-lead
#+begin_src org
  This is a standalone Emacs Org file containing emacs-lisp functionality.
#+end_src

* doc
** license
:PROPERTIES:
:custom_id: _doc-license
:END:

#+name: doc-license
#+begin_src emacs-lisp
  ;;  persemacs-extra — extra elisp functionality
  ;;  Copyright (C) 2024 — Erwann Rogard
  ;;  Released under GPL 3.0
  ;;  See https://www.gnu.org/licenses/gpl-3.0.en.html
#+end_src

** requirement
:PROPERTIES:
:custom_id: _doc-req
:END:

*** machine
:PROPERTIES:
:custom_id: _doc-req-machine
:END:

Installed:
#+name: doc-install
| Emacs |

** workflow

For each source blocks below:
- Execute it
- Process the matches as indicated

#+begin_src emacs-lisp
  (org-occur "header-args: :tangle" nil nil)
#+end_src

** reference

Emacs-org:
- [[https://orgmode.org/manual/Working-with-Source-Code.html][Working with source code]]

* source
** org
*** table

#+name: tbl-foo-bar-string
| "foo" | "x" |
| "bar" | "y" |

#+name: tbl-foo-bar-dir
| "foo" | ./foo |
| "bar" | ./bar |

** el
*** group

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
    (defgroup erw/extra nil "erw's extra elisp functionality"
      :prefix "erw/")
#+end_src

*** string
**** wrap-single-quotes

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
  (defun erw/function-string-wrap-single-quotes (filename)
    "Wraps STRING with single quotes if absent."
    (if (string-match-p "^'.*'$" filename)
       string
      (concat "'" filename "'")))
  (defalias 'erw/wrap-single-quotes 'erw/function-string-wrap-single-quotes)
#+end_src

#+RESULTS:
: erw/wrap-single-quotes

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
  (let ((string (buffer-file-name (current-buffer))))
    (format "before: %s\nafter: %s" string 
             (funcall 'erw/wrap-single-quotes string)))
#+end_src

#+RESULTS:
: before: /home/erwann/.emacs.d/routinel.org
: after: '/home/erwann/.emacs.d/routinel.org'

*** table
**** field-address

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
  (defun erw/function-table-field-address (index)
    "Table address for field INDEX"
    (format "@1$%d..@>$%d" index index))
  (defalias 'erw/field-address 'erw/function-table-field-address)
#+end_src

#+RESULTS:
: erw/field-address

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
  (erw/field-address 2)
#+end_src

#+RESULTS:
: @1$2..@>$2

**** get-range

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
  (defun erw/function-table-get-range-at-file (tbl-id range-address &optional file-name)
    "Get list of values in RANGE-ADDRESS from TBL-ID at FILE-NAME.
       Credits: https://redd.it/r2nig7"
    (let ((file-name (or file-name (buffer-file-name (current-buffer)))))
      (with-current-buffer (find-file-noselect file-name)
        (org-table-get-remote-range tbl-id range-address))))
  (defalias 'erw/table-range 'erw/function-table-get-range-at-file)
#+end_src

#+RESULTS:
: erw/table-range

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
(erw/table-range "tbl-foo-bar-string" (format "@1$%d..@>$%d" 1 1))
#+end_src

#+RESULTS:
| "foo" | "bar" |

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
(erw/table-range "tbl-foo-bar-string" (format "@1$%d..@>$%d" 2 2))
#+end_src

#+RESULTS:
| "x" | "y" |

**** lookup

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
  (defun erw/function-table-lookup (tbl-id key &optional file-name key-index value-index match-predicate)
    "Lookup field KEY-INDEX and return corresponding entry in field VALUE-INDEX from table TBL-ID."
    (interactive)
    (let ((key-address (erw/field-address (or key-index 1)))
          (value-address (erw/field-address (or value-index 2)))
          (file-name (or file-name (buffer-file-name (current-buffer))))
          (match-predicate (or match-predicate 'string-match-p)))
      (let ((key-range (erw/table-range tbl-id key-address file-name))
            (value-range (erw/table-range tbl-id value-address file-name)))
        (org-lookup-first key key-range value-range 'string-match-p))))
(defalias 'erw/table-lookup 'erw/function-table-lookup)
#+end_src

#+RESULTS:
: erw/table-lookup

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
(erw/table-lookup "tbl-foo-bar-string" "foo")
#+end_src

#+RESULTS:
: "x"

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
(erw/table-lookup "tbl-foo-bar-string" "bar")
#+end_src

#+RESULTS:
: "y"

**** to-path

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
  (defun erw/table-to-path (tbl-name key &optional child)
    (let* ((parent (erw/table-lookup tbl-name key))
           (parent (erw/ensure-directory parent))
           (args (if child
                     (list child parent)
                   (list parent))))
      (message "debug: parent is %s" parent)
      (apply #'expand-file-name args)))
#+end_src

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
(erw/table-to-path "tbl-test" "foo" "bar")
#+end_src

*** path
**** ensure-directory

#+header: :noweb-ref source-elisp
#+begin_src emacs-lisp
  (defun erw/ensure-directory (path)
    "Ensures PATH ends with a slash"
    (if (not (string-match-p "/$" path))
        (concat path "/")
      path))
#+end_src

#+RESULTS:
: erw/ensure-directory

#+header: :noweb-ref erw-example
#+begin_src emacs-lisp
(erw/ensure-directory "foo")
#+end_src

#+RESULTS:
: foo/

* tangle
** extra
:PROPERTIES:
:header-args: :tangle ./extra.el
:END:

#+header: :noweb yes
#+begin_src emacs-lisp
  <<doc-license>>
  <<source-elisp>>
#+end_src

* miscellany
** scratchpad
*** table

#+begin_src emacs-lisp
  (org-table-get-remote-range "const-path" "@1$1..@>$1")
#+end_src

#+RESULTS:
: unique-directory

#+header: :results value
#+begin_src emacs-lisp
   (org-table-get-remote-range "foobar" (format "@1$%d..@>$%d" 1 1))
#+end_src

#+RESULTS:
| foo | bar |

#+header: :results value
#+begin_src emacs-lisp
   (org-table-get-remote-range "file:/home/erwann/.emacs.d/config.org::foobar" (format "@1$%d..@>$%d" 1 1))
#+end_src


#+begin_src emacs-lisp
  (org-lookup-first "unique-directory"
                    (erw/function-table-get-field "const-path" 1)
                    (erw/function-table-get-field "const-path" 2)))
#+end_src

#+RESULTS:
: "/home/erwann/unique"

*** list

#+header: example-plist-get-1
#+begin_src emacs-lisp
  (let ((my-listp (list 'foo "x" 'bar "y")))
    (plist-get my-listp 'foo))
#+end_src

#+RESULTS:
: x

#+header: example-plist-get-2
#+begin_src emacs-lisp
  (let ((my-listp '("foo" "x" bar "y")))
    (list (plist-get my-listp 'bar 'eq)
     (plist-get my-listp "foo" 'string-match-p)))
#+end_src

#+RESULTS:
| y | x |

#+name: debug-a
#+begin_src emacs-lisp
  (let ((my-alist '(("foo" . "x")
                 ("bar" . "y"))))
      (cdr (assoc "foo" my-alist)))
#+end_src

#+RESULTS: debug-a
: x

#+name: debug-b
#+begin_src emacs-lisp
  (makunbound 'my-pair)
  (makunbound 'my-pair-x)
  (makunbound 'my-pair-y)
  (defun my-pair (key value)
    (cons key value))
  (defun my-pair-x (key)
    (my-pair key "x"))
  (defun my-pair-y (key)
    (my-pair key "y"))
  (let ((my-alist `(,(my-pair-x "foo")
                    , (my-pair-y "bar"))))
    (cdr (assoc "foo" my-alist)))
#+end_src

#+RESULTS: debug-b
: ((foo . x) (bar . y))

#+begin_src emacs-lisp
      (defconst my-alist '(("us-ascii" . "text")
                     ("utf-8" . "text")
       ("utf-16" . "text")
       ("utf-32" . "text")
       ("iso-8859-1" . "text")
       ("iso-8859-2" . "text")
       ("iso-8859-15" . "text")
       ("windows-1252" . "text")
       ("euc-jp" . "text")
       ("shift_jis" . "text")
       ("euc-kr" . "text")
       ("big5" . "text")
       ("gb2312" . "text")
       ("binary" . "binary")))
      (alist-get "big5" my-alist nil nil 'equal)
;;      (cdr (assoc "big5" my-alist)))
#+end_src

#+RESULTS:
: text

#+name: setup-1
#+begin_src emacs-lisp
  (defun my-fun () (message "%s" "foo"))
  (defvar my-var (my-fun))
  (symbol-value 'my-var)
#+end_src

#+RESULTS:
: foo

#+name: setup-2
#+begin_src emacs-lisp
(makunbound my-var)
(makunbound my-fun)
  (defvar my-var (my-fun))
  (defun my-fun () (message "%s" "foo"))
  (symbol-value 'my-var)
#+end_src

