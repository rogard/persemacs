#+title: Emacs configuration
#+author: Erwann Rogard
#+startup: fold
#+property: header-args :tangle no

* resource
** article
- [[https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation][Speed up Emacs with libjansson and native elisp compilation - by Mickey Peterson]]
- [[https://justinbarclay.ca/posts/from-zero-to-ide-with-emacs-and-lsp/][From zero to IDE with emacs and LSP - By Jutin Barclay]]
- [[https://arne.me/blog/emacs-from-scratch-part-one-foundations][Emacs config from scratch - By Arne]]
- [[https://ianyepan.github.io/posts/setting-up-use-package/][Setting up =use-package= - By Ian Yepan]]
** manual
*** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Scoping.html][Scoping rules for variables bindings]]
Keywords:
- Lexical binding
- Dynamic binding
- Closures

#+begin_src emacs-lisp
  ;; -*- lexical-binding: t; -*-
#+end_src

*** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Profiling.html][Profiling]]
* miscellany
** convention

#+name tags
| owner   | requires owner input   |
| task    | a task awaits action   |
| require | contains a requirement |

* package

Package customization.

** source
*** corfu

Reference:
- https://github.com/minad/corfu

#+name: src-package-corfu
#+begin_src emacs-lisp
  (use-package corfu
  ;; Optional customizations
  :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  ;; :hook ((prog-mode . corfu-mode)
  ;;        (shell-mode . corfu-mode)
  ;;        (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
  ;; be used globally (M-/).  See also the customization variable
  ;; `global-corfu-modes' to exclude certain modes.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  ;; (setq completion-cycle-threshold 3)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)

  ;; Emacs 30 and newer: Disable Ispell completion function. As an alternative,
  ;; try `cape-dict'.
  (setq text-mode-ispell-word-completion nil)

  ;; Emacs 28 and newer: Hide commands in M-x which do not apply to the current
  ;; mode.  Corfu commands are hidden, since they are not used via M-x. This
  ;; setting is useful beyond Corfu.
  (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

#+name: src-package-corfu-disable
#+begin_src emacs-lisp
  (use-package corfu
  :ensure
  :demand
  :custom
  (corfu-auto t)
  (corfu-quit-at-boundary 'separator)
  (corfu-quit-no-match 'separator)
  (corfu-scroll-margin 0)
  (corfu-separator ?\s)
  (corfu-popupinfo-delay '(0.5 . 0.2))
  :config
  (global-corfu-mode)
  (corfu-popupinfo-mode +1))
#+end_src
*** ekg

#+name: src-package-ekg
#+begin_src emacs-lisp
  (use-package ekg)
#+end_src

*** dashboard

#+name: src-package-dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner 'logo
          ;;          dashboard-banner-logo-title "Yay Evil!"
          dashboard-banner-logo-title "Misterwann!"
          dashboard-items nil
          dashboard-set-footer nil))
#+end_src

*** doomemacs

#+name: src-package-doomemacs
#+begin_src emacs-lisp
(use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme ;;
     ;;   'doom-flatwhite
     ;;   'doom-homage-white
     ;;   'doom-feather-light
     ;;   'doom-one-light
     'doom-wilmersdorf t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs owners
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+end_src

*** emacs

#+name: src-package-emacs-ui
#+header: :noweb-ref src-package-emacs
#+begin_src emacs-lisp
  (use-package emacs ;; pseudo-package
    :config
    (setq frame-title-format '("Misterwann")
          ring-bell-function 'ignore       ; minimize distraction
          frame-resize-pixelwise t
          default-directory "~/")

    ;; Omit default startup screen
    (setq inhibit-startup-screen t)

    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)

    ;; better scrolling experience
    (setq scroll-margin 0
          scroll-conservatively 101
          scroll-preserve-screen-position t
          auto-window-vscroll nil)
    )
  ;;	  scroll-conservatively 101 ; >100
#+end_src

*** files

#+name: src-package-files
#+header :noweb-ref src-package-emacs-file-tweaks
#+begin_src emacs-lisp
  (use-package files
    :config
    (setq confirm-kill-processes nil
          create-lockfiles nil ; don't create .# files (crashes 'npm start')
          make-backup-files nil))
#+end_src

*** flymake

Reference:
- [[https://github.com/federicotdn/flymake-shellcheck][flymate-shellcheck]]


#+header: :noweb-ref src-package-flymake
#+begin_src emacs-lisp
  (use-package flymake-shellcheck
    :ensure nil ;; built-in
    :commands flymake-shellcheck-load
    :init
    (add-hook 'sh-mode-hook 'flymake-shellcheck-load))
#+end_src

*** lsp
:LOGBOOK:
- Note taken on [2024-06-20 Thu 15:25] \\
  Inside =debug.sh=, =Flymake= ensures that when a token is selected, the corresponding doc appears.
- Note taken on [2024-06-20 Thu 15:23] \\
  Inside =debug.sh=

  #+begin_quote
  Minor modes enabled in this buffer: Auto-Save Corfu Eldoc Font-Lock
  Lsp-Completion Lsp-Diagnostics Lsp-Headerline-Breadcrumb Lsp-Managed
  Lsp Lsp-Modeline-Code-Actions Lsp-Modeline-Diagnostics
  Lsp-Modeline-Workspace-Status Lsp-Ui Lsp-Ui-Sideline

  The major mode is Shell-script mode defined in sh-script.el:

  Major mode for editing shell scripts.
  #+end_quote
:END:

Reference:
- [[https://github.com/bash-lsp/bash-language-server][bash-lsp/bash-language-server]]

#+header: :noweb-ref src-package-lsp-mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :hook ((sh-mode) . lsp-deferred) ; XYZ are to be replaced by python, c++, etc.
    :commands lsp
    )
#+end_src

Commands:
- =M-x lsp-ui-imenu=
- =M-x lsp-describe-sessions=

#+header: :noweb-ref src-package-lsp-mode-disable
#+begin_src emacs-lisp
  (use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq lsp-ui-doc-enable nil)
  (setq lsp-ui-doc-header t)
  (setq lsp-ui-doc-include-signature t)
  (setq lsp-ui-doc-border (face-foreground 'default))
  (setq lsp-ui-sideline-show-code-actions t)
  (setq lsp-ui-sideline-delay 0.05))
#+end_src

*** markdown

#+name: src-package-markdown-mode
#+begin_src emacs-lisp
  (use-package markdown-mode
    :hook (markdown-mode . visual-line-mode))

  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src

*** org

Resource:
- https://orgmode.org/worg/org-contrib/babel/languages/index.html
- https://orgmode.org/manual/Languages.html
  
#+header: :noweb-ref src-package-org
#+begin_src emacs-lisp
(use-package org
  :custom
  (org-read-date-force-compatible-dates nil) ;; extends calendar
  (org-log-into-drawer t)
  (org-capture-templates
   '(("c" "Core" entry (file+headline "/home/erwann/src/org/capture.org" "Capture") (file "~/.emacs.d/capture_core_tpl"))))
  (org-refile-targets '((nil :tag . "refile") (nil :maxlevel . 3)))
  (org-agenda-files '("/home/erwann/.emacs.d/agenda_files"))
  (org-fold-core-style 'overlays) ;; https://lists.nongnu.org/archive/html/emacs-orgmode/2024-04/msg00497.html
  :hook ((org-mode . visual-line-mode)
         (org-mode . org-indent-mode))
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (latex . t)
     (org . t)
     (python . t)
     (shell . t)
     (lua . t))))
#+end_src

#+header:  :noweb-ref src-package-org
#+begin_src emacs-lisp
  (use-package org-bullets :hook (org-mode . org-bullets-mode))
#+end_src

*** vertico

Reference
- https://github.com/minad/vertico

#+header: :noweb-ref src-package-vertico
#+begin_src emacs-lisp
    ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )
#+end_src

#+header: :noweb-ref src-package-vertico
#+begin_src emacs-lisp
  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))
#+end_src

#+header: :noweb-ref src-package-vertico
#+begin_src emacs-lisp
  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Support opening new minibuffers from inside existing minibuffers.
    (setq enable-recursive-minibuffers t)

    ;; Emacs 28 and newer: Hide commands in M-x which do not work in the current
    ;; mode.  Vertico commands are hidden in normal buffers. This setting is
    ;; useful beyond Vertico.
    (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

*** web-mode

#+name: src-package-web-mode
#+begin_src emacs-lisp
  (use-package web-mode
    :mode (("\\.html?\\'" . web-mode)
           ("\\.css\\'"   . web-mode)
           ("\\.jsx?\\'"  . web-mode)
           ("\\.tsx?\\'"  . web-mode)
           ("\\.json\\'"  . web-mode))
    :config
    (setq web-mode-markup-indent-offset 2) ; HTML
    (setq web-mode-css-indent-offset 2)    ; CSS
    (setq web-mode-code-indent-offset 2)   ; JS/JSX/TS/TSX
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))))
#+end_src
*** wolfram

Resource:
- https://github.com/tririver/ob-mathematica/
- https://rgoswami.me/posts/org-mathematica/
- https://emacs.stackexchange.com/a/75819
- https://github.com/kawabata/wolfram-mode/tree/be680190cac6ccf579dbce107deaae495928d1b3
  
#+header: :noweb-ref src-package-wolfram
#+begin_src emacs-lisp
  ;; Org also enables languages when loaded with ‘require’ statement.
  (require 'ob-mathematica "/home/erwann/github/ob-mathematica/ob-mathematica.el")
#+end_src

#+header: :noweb-ref src-package-wolfram
#+begin_src emacs-lisp
(use-package wolfram-mode
  :ensure t
  ;; :commands (wolfram-mode run-wolfram) ;; Uncomment if needed
  :mode (("\\.m\\'" . wolfram-mode)
         ("\\.nb\\'" . wolfram-mode))
  :init
  (setq wolfram-program "/usr/local/Wolfram/WolframEngine/14.0/SystemFiles/Kernel/Binaries/Linux-x86-64/WolframKernel")
  ;; Uncomment and adjust the following line if you need to set wolfram-path
  ;; (setq wolfram-path "/Owners/yourownername/Library/WolframEngine/12.3/Applications")
)
#+end_src

** tangle

#+header: :tangle yes
#+header: :noweb yes
#+begin_src emacs-lisp
  <<src-package-corfu>>
  <<src-package-dashboard>>
  <<src-package-doomemacs>>
  <<src-package-ekg>>
  <<src-package-el-mock>>
  <<src-package-emacs>>
  <<src-package-files>>
  <<src-package-flymake>>
  <<src-package-lsp-mode>>
  <<src-package-markdown-mode>>
  <<src-package-org>>
  <<src-package-scroll-bar>>
  <<src-package-vertico>>
  <<src-package-web-mode>>
#+end_src

* extra
** source

#+header: :noweb-ref src-erw-custom
#+begin_src emacs-lisp
    (defgroup erw-custom nil "erw's extra functionality for org mode"
      :prefix "erw/")
#+end_src

#+header: :noweb-ref src-erw-custom
#+begin_src emacs-lisp
  (defconst erw/const-owner-at-hostname (concat (getenv "OWNER") "@" (system-name)))
#+end_src

#+header: :noweb-ref src-erw-custom
#+begin_src emacs-lisp
  (defcustom erw/custom-owner 'erw/const-owner-at-hostname
  "constant expanding to owner"
  :type 'string
  :group 'erw-extra)
#+end_src

** tangle

#+header: :tangle yes
#+header: :noweb yes
#+begin_src emacs-lisp
  <<src-erw-custom>>
#+end_src

